The following notes are less comprehensive in detail then stableNotes.txt due to the large quantity of changes.
Instead it details the major changes and intent, along with important choices for settings

# General overview of the overlay

The aim of the overlay is to replace the blockram within the FPGA with the 4GB of DDR4 SDRAM that is on the RFSoC.
This is necessary to get a larger DAC buffer, as the FPGA can only generate 2MB of ram to use. Increasing the DAC
buffer size results in a finer frequency resolution. At 2MB, the DAC has a resolution of ~7kHz, at 4GB the DAC
has a resolution of ~3Hz. As such the hier_dac_play is heavily modified to make use of DDR4.

To achive this, the DDR4 is attached to a modified DACRAMStreamer that continueally requests burst reads from the
DDR4 module. It then sends the values it reads into the master side of a FIFO. The DDR4, DACRAMStreamer, and master
side of the FIFO all run at 300MHz. The output of the FIFO runs at 250MHz and goes to the width convertor, clock 
convertor, and register slice used to up the sample rate going into the RFDC block. 

The intention here is that due to burst limitation of AXI4, a continues data stream cannot be read from DDR4 (as
bursts can only contain a maximum of 256 transfers in general, and 64 transfers in our spesific case due to 4KB
memory guards and a bus width of 64 bytes).By connecting the DACRAMStreamer to a FIFO and running it faster then
the FIFO is read, data is on average put in faster then it is taken out and so any breaks in the data transfer 
caused by a new burst needing to be started are removed. Required values for clock speed can be calculated by
dividing the number of words transfered in 1 burst (in our case, 64) by the number of clock cycles it takes to 
transmit those words from when the read request is made (this accounts for read latancy). Multiplying this by 
the clock frequency of the FIFO write side gives an "effective" clock frequency. Provided this is faster then the
clock used to read from the FIFO, a continues and unbroken datastream will be achived on the output. 

The DDR4 and DACRAMStreamer are additionally set up 
such that if the FIFO is full, it will pause the data transfer until there is space.


# Implimentation

In an attempt to achive this, the overlay was completely redesigned. The block diagrams are attached within this 
folder as PDFs. 

## Changes to the overall block diagram
The internalRamInterconnect is completely removed and replaced with the blocks required to convert the data 
widths between the UltraScale MPSoC + and the DDR4. Everything apart from the hier_dac_player and the 
additional blocks required to make it output the desired waveform. 

The FPD1 port was disabled as it was not being used. FPD0 was chosen as the active port as in the original MTS
overlay that is the port the DDR4 was connected to. The clock that FPD0 runs on was connected to the AXI clock
of the DDR4 (spesifically the c0_ddr4_ui_clk). This allows it to sync with all the other blocks it connects
with inside the hier_dac_play.

## Changes to the hier_dac_play
The internals of the hier_dac_play has been significantly redesigned to interface with the DDR4 module. The 
axi_bram_ctrl and Block Memory Generator have been removed and replaced with the DDR4 block. A processor system
reset block was added to support the DDR4. It should be notes that the design for this was largly copied from the 
original MTS overlay, and so there are potentially several issues with how this block has been connected.
The DACRAMStreamer has been modified to interface using AXI4 instead of the Block Memory Generator interface
(discussed more in later sections).

The DACRAMStreamer then connects directly to a AXI4-Stream FIFO to help smooth out the data transfer from the DDR4.
The master (write side) of the FIFO is connected to the DDR4 clock running ~300MHz and the read size is connected
to the clock wizards 250MHz clock. The FIFO then connects to a clock which steps the rate from 250MHz to 500MHz,
which then does into a bus width converter that halfs the bus size, and into a register slice to smooth out data 
trasnfers. 

## Changes to the DACRAMStreamer
The DACRAMStreamer has been modified to interface using AXI4 instead of BRAM protocol. The configurable parameters
are address width, memory size, and data bus width. Currently it is hardcoded to start at the address 
0x10_0000_0000 however this can and should be changed in future to be editable. The DACRAMStreamer always requests
burst transfers of 64 byte, which at a 512 bus width satisifes the 4KB memory guard requirments. Again the 64 is 
hardcoded at the moment, and in future can be edited to adapt based on the bus width. Every clock cycle, if a burst
transfer is in progress, the DACRAMStreamer puts the received data on the AXI4-stream line. If there is not a 
burst, then it requests the begining of a new burst at the next memory address. If it has reached the end of the   
memory it loops back to the start. If the FIFO is full, the current data transfer will pause.
